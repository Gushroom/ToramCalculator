generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}

generator kysely {
    provider     = "prisma-kysely"
    output       = "../src/repositories/db"
    fileName     = "types.ts"
    enumFileName = "enums.ts"
}

datasource db {
    provider = "postgresql"
    url      = env("PG_URL")
}

enum UserRole {
    USER
    ADMIN
}

model user {
    id            String            @id
    name          String?
    email         String?           @unique
    emailVerified DateTime?
    image         String?
    userRole      UserRole
    accounts      account[]
    sessions      session[]
    posts         post[]
    rates         rate[]
    create        user_create_data?
    update        user_update_data?
}

model account {
    id                String  @id
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String

    @@unique([provider, providerAccountId])
}

model session {
    id           String   @id
    sessionToken String   @unique
    expires      DateTime
    user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
}

model verification_token {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model post {
    id          String   @id
    name        String
    createdAt   DateTime
    updatedAt   DateTime @updatedAt
    createdBy   user     @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// 以下是托拉姆的数据模型 ----------------------------------------------------------------------------------------------

// 元素属性枚举
enum Element {
    Normal
    Light
    Dark
    Water
    Fire
    Earth
    Wind
}

// 怪物分类枚举
enum MobType {
    Mob
    MiniBoss
    Boss
}

// 特殊能力值类型枚举
enum SpecialAbiType {
    None
    Luk
    Cri
    Tec
    Men
}

// 身体装备轻重化类型枚举
enum ArmorType {
    Normal
    Light
    Heavy
}

// 技能树枚举
enum SkillTreeName {
    BLADE
    SHOT
    MAGIC
    MARTIAL
    DUALSWORD
    HALBERD
    MONONOFU
    CRUSHER
    SPRITE
}

// 技能类型枚举（主动技能，被动技能）
enum SkillType {
    ACTIVE_SKILL
    PASSIVE_SKILL
}

// 技能额外动作类型枚举（咏唱、蓄力）
enum ChargingType {
    None
    Chanting
    Charging
}

// 技能效果类型枚举（持续效果，立即效果）
enum YieldType {
    PersistentEffect
    ImmediateEffect
}

// 效果有效期类型枚举（按时间计算、按技能数计算、无限）
enum DurationType {
    FRAME
    SKILL
    UNLIMITED
}

// 技能是否继承武器元素
enum WeaponElementDependencyType {
    EXTEND
    UNEXTEND
}

// 怪物星级
enum MobDifficultyFlag {
    Easy
    Normal
    Hard
    Lunatic
    Ultimate
}

// 怪物伤害类型
enum MobDamageType {
    Physics
    Magic
    CurrentRate
    MaxRate
}

// 连击效果类型
enum ComboType {
    NULL
}

// 角色类型
enum CharacterType {
    Tank
    Mage
    Ranger
    Marksman
}

// 用户创建内容
model user_create_data {
    characters           character[]
    mobs                 mob[]
    crystals             crystal[]
    weapons              weapon[]
    subWeapons           sub_weapon[]
    bodyArmors           armor[]
    additionalEquipments additional_equipment[]
    specialEquipments    special_equipment[]
    pets                 pet[]
    skills               skill[]
    consumables          consumable[]
    combos               combo[]
    simulators           simulator[]
    belongToUser         user                   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId               String                 @id
}

// 用户更新内容
model user_update_data {
    mobs                 mob[]
    crystals             crystal[]
    weapons              weapon[]
    subWeapons           sub_weapon[]
    bodyArmors           armor[]
    additionalEquipments additional_equipment[]
    specialEquipments    special_equipment[]
    pets                 pet[]
    skills               skill[]
    consumables          consumable[]
    character            character[]
    simulator            simulator[]
    belongToUser         user                   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId               String                 @id
}

// 世界
model world {
    id String @id

    name      String
    addresses address[]
}

// 地点类型（普通地点，限时地点）
enum AddressType {
    Normal
    Limited
}

// 地点
model address {
    id String @id

    name String
    type AddressType
    x    Int
    y    Int

    zones zone[]

    belongToWorld world  @relation(fields: [worldId], references: [id], onDelete: Cascade)
    worldId       String
}

// 地图模型
model zone {
    id String @id

    name        String?
    linkZone    String[]
    rewardNodes Int
    mobs        mob[]
    npcs        npc[]

    belongToAddress address @relation(fields: [addressId], references: [id])
    addressId       String
}

// NPC模型
model npc {
    id String @id

    name  String
    tasks task[]

    belongToZone zone   @relation(fields: [zoneId], references: [id])
    zoneId       String
}

// 任务模型
model task {
    id String @id

    name String
    lv   Int

    belongToNpc npc    @relation(fields: [npcId], references: [id])
    npcId       String

    rewards reward[]
}

// 任务奖励模型
model reward {
    id String @id

    type        String
    value       Int
    probability Int

    rewardWeapons weapon @relation(fields: [rewardWeaponId], references: [id])
    rewardWeaponId String

    belongToTask task   @relation(fields: [taskId], references: [id])
    taskId       String
}

// 素材类型
enum PtType {
    Metal
    Cloth
    Beast
    Wood
    Drug
    Magic
}

// 素材物品
model material {
    id String @id

    name    String
    ptType  PtType
    ptValue Int
    gold    Int
}


// 怪物模型
model mob {
    id String @id

    name                             String ///  @zod.string.min(2, { message: "最少2个字符" })
    mobType                          MobType
    difficultyFlag                   MobDifficultyFlag // 仅当怪物类型为Boss时生效
    baseLv                           Int
    experience                       Int
    partsExperience                  Int
    address                          String
    element                          Element
    radius                           Int
    maxhp                            Int
    physicalDefense                  Int
    physicalResistance               Int
    magicalDefense                   Int
    magicalResistance                Int
    criticalResistance               Int
    avoidance                        Int
    dodge                            Int
    block                            Int
    normalAttackResistanceModifier   Int
    physicalAttackResistanceModifier Int
    magicalAttackResistanceModifier  Int
    flow                             String

    drops drop[]

    difficultyOfTank           Int
    difficultyOfMelee          Int
    difficultyOfRanged         Int
    possibilityOfRunningAround Int
    extraDetails               String
    dataSources                String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique
    image        image      @relation(fields: [imageId], references: [id])
    imageId      String

    belongToMobs simulator[]
    belongToMap  zone[]

    updatedBy       user_update_data? @relation(fields: [updatedByUserId], references: [userId])
    updatedByUserId String?
    createdBy       user_create_data? @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

// 部位破坏奖励
enum PartBreakReward {
    None
    CanDrop
    DropUp
}

// 部位枚举
enum MobPart {
    A
    B
    C
}

// 掉落物品类型枚举
enum DropType {
    Weapon
    SubWeapon
    Armor
    AdditionalEquipment
    SpecialEquipment
}

// 掉落物模型
model drop {
    id String @id

    dropLevel       Int
    relatedPart     MobPart
    relatedPartInfo String
    breakReward     PartBreakReward

    dropBy      mob         @relation(fields: [dropById], references: [id])
    dropById    String
    // 定义多态关联
    weapon      weapon?     @relation(fields: [weaponId], references: [id])
    weaponId    String
    subWeapon   sub_weapon? @relation(fields: [subWeaponId], references: [id])
    subWeaponId String
}

// 附魔属性位置
enum EnchantmentLocation {
    Weapon
    Armor
}

// 附魔模型
model enchantment_attributes {
    id String @id

    name     String
    location EnchantmentLocation
    flow     Json

    usedByCustomWeapon character_weapon[]
    usedByCustomArmor    character_armor[]
}

// 锻晶模型
model crystal {
    id String @id

    name        String
    crystalType String
    modifiers   String[]

    extraDetails String?
    dataSources  String?

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique

    usedByWeapon              weapon[]
    usedByArmor           armor[]
    usedByAdditionalEquipment additional_equipment[]
    usedBySpecialEquipment    special_equipment[]

    updatedBy       user_update_data? @relation(fields: [updatedByUserId], references: [userId])
    updatedByUserId String?
    createdBy       user_create_data? @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

// 配方的用处
enum RecipeUse {
    none
}

// 配方
model recipe {
    id String @id

    count     Int

    belongToWeapon      weapon     @relation(fields: [belongToWeaponId], references: [id])
    belongToWeaponId    String    
    belongToSubWeapon   sub_weapon @relation(fields: [belongToSubWeaponId], references: [id])
    belongToSubWeaponId String     
    belongToArmor   armor @relation(fields: [belongToArmorId], references: [id])
    belongToArmorId String     
}

// 活动武器与常态武器模型
enum AvailabilityType {
    permanent
    event
}

// 道具取得方式
enum AcquisitionMethodType {
    Drop
    Craft
}

// 武器模型
model weapon {
    id String @id

    name               String
    weaponType         String
    availability       AvailabilityType
    acquisitionMethod  AcquisitionMethodType
    baseAtk            Int
    stability          Int
    defaultCrystalList crystal[]
    modifiers          String[]
    color              color?

    belongToDrop drop[]
    belongToRecipe  recipe[]
    belongToRewards reward[]
    dataSources  String
    extraDetails String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique
    image        image[]

    usedBy          character_weapon[]
    updatedBy       user_update_data? @relation(fields: [updatedByUserId], references: [userId])
    updatedByUserId String?
    createdBy       user_create_data? @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

// 染色信息模型
model color {
    colorA Int
    colorB Int
    colorC Int

    belongToWeapon      weapon     @relation(fields: [belongToWeaponId], references: [id])
    belongToWeaponId    String     @unique
    belongToSubWeapon   sub_weapon @relation(fields: [belongToSubWeaponId], references: [id])
    belongToSubWeaponId String     @unique
    belongToArmor   armor @relation(fields: [belongToArmorId], references: [id])
    belongToArmorId String     @unique
}

// 玩家自定义武器模型
model character_weapon {
    id String @id

    name                    String
    atk                     Int
    template                weapon                 @relation(fields: [templateId], references: [id])
    templateId              String
    refinement              Int
    enchantmentAttributes   enchantment_attributes @relation(fields: [enchantmentAttributesId], references: [id])
    enchantmentAttributesId String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    extraDetails String

    usedBy character[]
}

// 副武器模型
model sub_weapon {
    id String @id

    name              String
    subWeaponType     String
    availability      AvailabilityType
    acquisitionMethod AcquisitionMethodType
    baseAbi           Int
    stability         Int? // 仅小刀和箭矢生效
    modifiers         String[]
    color             color?

    recipe recipe[]

    extraDetails String
    dataSources  String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique
    image        image[]

    usedBy          character_sub_weapon[]
    belongToDrop    drop[]
    updatedBy       user_update_data?   @relation(fields: [updatedByUserId], references: [userId])
    updatedByUserId String?
    createdBy       user_create_data?   @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

// 玩家自定义副武器模型
model character_sub_weapon {
    id String @id

    name       String
    abi        Int
    template   sub_weapon @relation(fields: [templateId], references: [id])
    templateId String
    refinement Int?

    updatedAt DateTime @updatedAt
    createdAt DateTime

    extraDetails String

    usedBy character[]
}

// 身体装备模型
model armor {
    id String @id

    name               String
    baseDef            Int
    availability       AvailabilityType
    acquisitionMethod  AcquisitionMethodType
    defaultCrystalList crystal[]
    modifiers          String[]
    color              color?

    recipe  recipe[]
    extraDetails String
    dataSources  String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique
    image        image[]

    usedBy character_armor[]

    updatedBy       user_update_data? @relation(fields: [updatedByUserId], references: [userId])
    updatedByUserId String?
    createdBy       user_create_data? @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

// 玩家自定义身体装备模型
model character_armor {
    id String @id

    name                    String
    def                     Int
    bodyArmorType           ArmorType
    template                armor             @relation(fields: [templateId], references: [id])
    templateId              String
    refinement              Int
    enchantmentAttributes   enchantment_attributes @relation(fields: [enchantmentAttributesId], references: [id])
    enchantmentAttributesId String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    extraDetails String

    usedBy character[]
}

// 追加装备模型
model additional_equipment {
    id String @id

    name        String
    refinement  Int
    modifiers   String[]
    crystalList crystal[]

    extraDetails String
    dataSources  String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique
    image        image[]

    usedBy character[]

    updatedBy       user_update_data? @relation(fields: [updatedByUserId], references: [userId])
    updatedByUserId String?
    createdBy       user_create_data? @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

// 特殊装备模型
model special_equipment {
    id String @id

    name        String
    modifiers   String[]
    crystalList crystal[]

    extraDetails String
    dataSources  String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique
    image        image[]

    usedBy character[]

    updatedBy       user_update_data? @relation(fields: [updatedByUserId], references: [userId])
    updatedByUserId String?
    createdBy       user_create_data? @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

// 技能模型
model skill {
    id String @id

    skillTreeName               SkillTreeName
    tier                        Int
    name                        String
    skillType                   SkillType
    weaponElementDependencyType WeaponElementDependencyType
    element                     Element
    skillDescription            String?
    skillEffect                 skill_effect[]

    extraDetails String
    dataSources  String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique

    usedBySkillList character[]
    usedByComboStep combo_step[]
    usedByStep      step[]

    updatedBy       user_update_data? @relation(fields: [updatedByUserId], references: [userId])
    updatedByUserId String?
    createdBy       user_create_data? @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

// 技能效果
model skill_effect {
    id String @id

    condition                          String
    description                        String
    motionBaseDurationFormula          String
    motionModifiableDurationFormula    String
    chargingType                       ChargingType
    chantingBaseDurationFormula        String
    chantingModifiableDurationFormula  String
    ReservoirBaseDurationFormula       String
    ReservoirModifiableDurationFormula String
    skillStartupFramesFormula          String
    skillCost                          skill_cost[]
    skillYield                         skill_yield[]

    belongToSkill   skill  @relation(fields: [belongToskillId], references: [id], onDelete: Cascade)
    belongToskillId String
}

// 技能消耗
model skill_cost {
    id String @id

    name        String?
    costFormula String

    belongToSkillEffect skill_effect? @relation(fields: [skillEffectId], references: [id], onDelete: Cascade)
    skillEffectId       String?
}

// 技能效果
model skill_yield {
    id String @id

    name                  String
    yieldType             YieldType
    yieldFormula          String
    mutationTimingFormula String?

    belongToSkillEffect skill_effect? @relation(fields: [skillEffectId], references: [id], onDelete: Cascade)
    skillEffectId       String?
}

// 宠物性格
enum Persona {
    Fervent
    Intelligent
    Mild
    Swift
    Justice
    Devoted
    Impulsive
    Calm
    Sly
    Timid
    Brave
    Active
    Sturdy
    Steady
    Max
}

// 宠物类型
enum PetType {
    AllTrades
    PhysicalAttack
    MagicAttack
    PhysicalDefense
    MagicDefensem
    Avoidance
    Hit
    SkillsEnhancement
    Genius
}

// 宠物模型
model pet {
    id String @id

    name       String
    pStr       Int
    pInt       Int
    pVit       Int
    pAgi       Int
    pDex       Int
    str        Int
    int        Int
    vit        Int
    agi        Int
    dex        Int
    weaponType String
    persona    Persona
    type       PetType
    weaponAtk  Int

    extraDetails String
    dataSources  String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique

    updatedBy       user_update_data? @relation(fields: [updatedByUserId], references: [userId])
    updatedByUserId String?
    createdBy       user_create_data? @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

// 消耗品模型
model consumable {
    id String @id

    name      String
    modifiers String[]

    extraDetails String
    dataSources  String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique

    usedBy character[]

    updatedBy       user_update_data? @relation(fields: [updatedByUserId], references: [userId])
    updatedByUserId String?
    createdBy       user_create_data? @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

// 连击模型
model combo {
    id String @id

    name      String
    comboStep combo_step[]

    usedBy character[]

    createdBy       user_create_data? @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

model combo_step {
    id String @id

    order     Int
    comboType ComboType
    skill     skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)
    skillId   String

    belongToCombo combo  @relation(fields: [comboId], references: [id], onDelete: Cascade)
    comboId       String
}

// 机体模型
model character {
    id            String        @id
    name          String
    characterType CharacterType

    lv                    Int
    baseStr               Int
    baseInt               Int
    baseVit               Int
    baseAgi               Int
    baseDex               Int
    specialAbiType        SpecialAbiType
    specialAbiValue       Int
    weapon                character_weapon        @relation(fields: [weaponId], references: [id])
    weaponId              String
    subWeapon             character_sub_weapon    @relation(fields: [subWeaponId], references: [id])
    subWeaponId           String
    bodyArmor             character_armor    @relation(fields: [bodyArmorId], references: [id])
    bodyArmorId           String
    additionalEquipment   additional_equipment @relation(fields: [additionalEquipmentId], references: [id])
    additionalEquipmentId String
    specialEquipment      special_equipment    @relation(fields: [specialEquipmentId], references: [id])
    specialEquipmentId    String
    fashion               String[]
    cuisine               String[]
    characterAttributes      String[]
    skillList             skill[]
    consumableList        consumable[]
    combos                combo[]

    extraDetails String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique
    image        image      @relation(fields: [imageId], references: [id])
    imageId      String     @unique

    updatedBy       user_update_data? @relation(fields: [updatedByUserId], references: [userId])
    updatedByUserId String?
    createdBy       user_create_data? @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

// 成员类型
enum MemberType {
    Mercenary
    Player
    Pet
}

// 队伍成员模型
model member {
    id String @id

    memberId      String
    memberTpye    MemberType
    flow          Json
    guildBuffList String[]

    belongToAnalyzers simulator[]
}

// 模拟模型
model simulator {
    id String @id

    name String
    mobs mob[]
    team member[]

    extraDetails String?

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique

    updatedBy       user_update_data? @relation(fields: [updatedByUserId], references: [userId])
    updatedByUserId String?
    createdBy       user_create_data? @relation(fields: [createdByUserId], references: [userId])
    createdByUserId String?
}

// 输出流程模型
model process {
    id String @id

    steps step[]
}

// 输出流程步骤模型
model step {
    id String @id

    order   Int
    skill   skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)
    skillId String

    belongToProcess process @relation(fields: [processId], references: [id], onDelete: Cascade)
    processId       String
}

// 统计字段模型
model statistics {
    id              String            @id
    usageTimestamps usage_timestamp[]
    viewTimestamps  view_timestamp[]
    rates           rate[]

    belongToMob                 mob?
    mobId                       String?
    belongToCrystal             crystal?
    crystalId                   String?
    belongToWeapon              weapon?
    weaponId                    String?
    belongToSubWeapon           sub_weapon?
    subWeaponId                 String?
    belongToArmor           armor?
    bodyArmorId                 String?
    belongToAdditionalEquipment additional_equipment?
    additionalEquipmentId       String?
    belongToSpecialEquipment    special_equipment?
    specialEquipmentId          String?
    belongToSkill               skill?
    skillId                     String?
    belongToPet                 pet?
    petId                       String?
    belongToConsumable          consumable?
    consumableId                String?
    character                   character?
    characterId                 String?
    simulator                   simulator?
    simulatorId                 String?
}

model image {
    id String @id

    dataUrl String

    belongToWeapon              weapon?               @relation(fields: [weaponId], references: [id])
    weaponId                    String?
    belongToSubWeapon           sub_weapon?           @relation(fields: [sub_weaponId], references: [id])
    sub_weaponId                String?
    belongToArmor           armor?           @relation(fields: [armorId], references: [id])
    armorId                String?
    belongToAdditionalEquipment additional_equipment? @relation(fields: [additional_equipmentId], references: [id])
    additional_equipmentId      String?
    belongToSpecialEquipment    special_equipment?    @relation(fields: [special_equipmentId], references: [id])
    special_equipmentId         String?
    usedByMob                   mob[]
    usedByCharacter             character[]
}

// 评分
model rate {
    id                 String     @id
    rate               Int
    belongToUser       user       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId             String
    belongToStatistics statistics @relation(fields: [statisticsId], references: [id])
    statisticsId       String
}

// 使用记录时间戳
model usage_timestamp {
    timestamp        DateTime    @id
    usedByStatistics statistics? @relation(fields: [statisticsId], references: [id])
    statisticsId     String?
}

// 查看记录时间戳
model view_timestamp {
    timestamp        DateTime    @id
    usedByStatistics statistics? @relation(fields: [statisticsId], references: [id])
    statisticsId     String?
}
