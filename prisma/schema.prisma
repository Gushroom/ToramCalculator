generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}

generator zod {
    provider                 = "zod-prisma-types"
    output                   = "../src/repositories/db"
    writeNullishInModelTypes = false // 是否将可选字段类型转换为 null | undefined
    useMultipleFiles         = false // 是否生成拆分的ts
    createInputTypes         = false // 是否生成input类型
}

generator kysely {
    provider     = "prisma-kysely"
    output       = "../src/repositories/db"
    fileName     = "types.ts"
    enumFileName = "enums.ts"
}

datasource db {
    provider = "postgresql"
    url      = env("PG_URL")
}

enum UserRole {
    USER
    ADMIN
}

model user {
    id            String    @id
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    userRole      UserRole
    accounts      account[]
    sessions      session[]
    posts         post[]
    rates         rate[]
}

model account {
    id                String   @id
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              user     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String
    players           player[]

    create account_create_data?
    update account_update_data?

    @@unique([provider, providerAccountId])
}

model session {
    id           String   @id
    sessionToken String   @unique
    expires      DateTime
    user         user     @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId    String
}

model verification_token {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model post {
    id          String   @id
    name        String
    createdAt   DateTime
    updatedAt   DateTime @updatedAt
    createdBy   user     @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// 以下是托拉姆的数据 ----------------------------------------------------------------------------------------------

// 元素属性枚举
enum Element {
    Normal
    Light
    Dark
    Water
    Fire
    Earth
    Wind
}

// 怪物分类枚举
enum MobType {
    Mob
    MiniBoss
    Boss
}

// 特殊能力值类型枚举
enum SpecialAbiType {
    None
    Luk
    Cri
    Tec
    Men
}

// 身体装备轻重化类型枚举
enum ArmorType {
    Normal
    Light
    Heavy
}

// 技能目标类型
enum SkillTargetType {
    None
    Self
    Player
    Enemy
}

// 技能充能类型枚举（咏唱、蓄力）
enum SkillChargingType {
    None
    Chanting
    Reservoir
}

// 技能效果类型枚举（持续效果，立即效果）
enum YieldType {
    PersistentEffect
    ImmediateEffect
}

// 效果有效期类型枚举（按时间计算、按技能数计算、无限）
enum DurationType {
    FRAME
    SKILL
    UNLIMITED
}

// 怪物星级
enum MobDifficultyFlag {
    Easy
    Normal
    Hard
    Lunatic
    Ultimate
}

// 怪物伤害类型
enum MobDamageType {
    Physics
    Magic
    CurrentRate
    MaxRate
}

// 连击效果类型
enum ComboType {
    NULL
}

// 角色类型
enum CharacterType {
    Tank
    Mage
    Ranger
    Marksman
}

// 账户创建内容
model account_create_data {
    mobs            mob[]
    items           item[]
    weaponEncAttrs  weapon_enchantment_attributes[]
    armorEncAttrs   armor_enchantment_attributes[]
    pets            pet[]
    skills          skill[]
    simulators      simulator[]
    belongToAccount account                         @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId       String                          @id
}

// 账户更新内容
model account_update_data {
    mobs            mob[]
    items           item[]
    weaponEncAttrs  weapon_enchantment_attributes[]
    armorEncAttrs   armor_enchantment_attributes[]
    pets            pet[]
    skills          skill[]
    simulator       simulator[]
    belongToAccount account                         @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId       String                          @id
}

model player {
    id String @id

    name String

    characters character[]
    mercenarys mercenary[]
    customPets custom_pet[]
    weapons    custom_weapon[]
    armors     custom_armor[]
    addEquips  custom_additional_equipment[]
    speEquips  custom_special_equipment[]
    avatars    avatar[]

    belongToAccount account @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId       String
}

// 世界
model world {
    id String @id

    name      String
    addresses address[]
}

// 活动
model activity {
    id   String @id
    name String

    zones   zone[]
    recipes recipe[]
}

// 地点类型（普通地点，限时地点）
enum AddressType {
    Normal
    Limited
}

// 地点
model address {
    id String @id

    name String
    type AddressType
    x    Int
    y    Int

    zones zone[]

    belongToWorld world  @relation(fields: [worldId], references: [id], onDelete: Cascade)
    worldId       String
}

// 地点区域
model zone {
    id String @id

    name        String?
    linkZone    String[]
    rewardNodes Int
    mobs        mob[]
    npcs        npc[]

    belongToActivity activity? @relation(fields: [activityId], references: [id])
    activityId       String?
    belongToAddress  address   @relation(fields: [addressId], references: [id])
    addressId        String
}

// NPC
model npc {
    id String @id

    name  String
    tasks task[]
    image image?

    belongToZone zone   @relation(fields: [zoneId], references: [id])
    zoneId       String
}

// 道具
model item {
    id String @id

    name       String
    weapon     weapon?
    armor      armor?
    addEquip   additional_equipment?
    speEquip   special_equipment?
    crystal    crystal?
    consumable consumable?
    material   material?

    dataSources  String
    extraDetails String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    usedByDropItem   drop_item[]
    usedByRewardItem reward[]

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId])
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId])
    createdByAccountId String?

    // 道具可以作为其他道具的配方原料
    usedInIngredient recipe_ingredient[]
}

// 配方项
model recipe_ingredient {
    id String @id

    type   String
    count  Int
    item   item?   @relation(fields: [itemId], references: [id])
    itemId String?

    // 从属于配方
    belongTorecipe recipe @relation(fields: [recipeId], references: [id])
    recipeId       String
}

// 配方
model recipe {
    id String @id

    recipeEntries recipe_ingredient[]

    belongToWeapon     weapon?               @relation(fields: [weaponId], references: [itemId])
    weaponId           String?               @unique
    belongToArmor      armor?                @relation(fields: [armorId], references: [itemId])
    armorId            String?               @unique
    belongToAddEquip   additional_equipment? @relation(fields: [addEquipId], references: [itemId])
    addEquipId         String?               @unique
    belongToSpeEquip   special_equipment?    @relation(fields: [speEquipId], references: [itemId])
    speEquipId         String?               @unique
    belongToConsumable consumable?           @relation(fields: [consumableId], references: [itemId])
    consumableId       String?               @unique

    inActivity activity? @relation(fields: [activityId], references: [id])
    activityId String?
}

// 任务
model task {
    id String @id

    lv      Int
    name    String
    rewards reward[]

    belongToNpc npc    @relation(fields: [npcId], references: [id])
    npcId       String
}

// 任务奖励
model reward {
    id String @id

    type        String
    value       Int
    probability Int
    item        item?   @relation(fields: [itemId], references: [id]) // 仅当type为item时生效
    itemId      String?

    belongToTask task   @relation(fields: [taskId], references: [id])
    taskId       String
}

// 素材类型
enum MaterialType {
    Metal
    Cloth
    Beast
    Wood
    Drug
    Magic
}

// 素材物品
model material {
    name         String
    belongToItem item   @relation(fields: [itemId], references: [id])
    itemId       String @id

    material MaterialType
    ptValue  Int
    price    Int
}

// enum MobTypeFlag {
//     Mob
//     Boss
//     Dungeon
//     Defence
//     Wave
//     Rezero
//     TreasureHunt
//     NewWave
//     HighRaid
//     GuildRaid
//     Moba
//     Entourage
// }

// 怪物
model mob {
    id String @id

    name                             String ///  @zod.string.min(2, { message: "最少2个字符" })
    mobType                          MobType
    baseLv                           Int
    experience                       Int
    partsExperience                  Int
    address                          String
    element                          Element
    radius                           Int
    maxhp                            Int
    physicalDefense                  Int
    physicalResistance               Int
    magicalDefense                   Int
    magicalResistance                Int
    criticalResistance               Int
    avoidance                        Int
    dodge                            Int
    block                            Int
    normalAttackResistanceModifier   Int
    physicalAttackResistanceModifier Int
    magicalAttackResistanceModifier  Int
    flow                             String

    drops drop_item[]

    difficultyOfTank           Int
    difficultyOfMelee          Int
    difficultyOfRanged         Int
    possibilityOfRunningAround Int
    extraDetails               String
    dataSources                String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique
    image        image      @relation(fields: [imageId], references: [id])
    imageId      String

    belongToMembers member[]
    belongToMap     zone[]

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId])
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId])
    createdByAccountId String?
}

// 部位破坏奖励
enum PartBreakReward {
    None
    CanDrop
    DropUp
}

// 部位枚举
enum MobPart {
    A
    B
    C
}

// 掉落物
model drop_item {
    id String @id

    item            item            @relation(fields: [itemId], references: [id])
    itemId          String
    probability     Int
    relatedPart     MobPart
    relatedPartInfo String
    breakReward     PartBreakReward

    dropBy   mob    @relation(fields: [dropById], references: [id])
    dropById String
}

// 武器附魔
model weapon_enchantment_attributes {
    id String @id

    name         String
    flow         Json
    extraDetails String?
    dataSources  String?

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique

    usedByCustomWeapon custom_weapon[]

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId])
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId])
    createdByAccountId String?
}

// 防具附魔
model armor_enchantment_attributes {
    id String @id

    name         String
    flow         Json
    extraDetails String?
    dataSources  String?

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique

    usedByCustomArmor custom_armor[]

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId])
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId])
    createdByAccountId String?
}

// 锻晶
model crystal {
    name        String
    crystalType String
    modifiers   String[]

    front crystal[] @relation("FrontRelation")
    back  crystal[] @relation("BackRelation")

    belongToItem item   @relation(fields: [itemId], references: [id])
    itemId       String @id

    usedByWeapon         weapon[]
    usedByCustomWeapon   custom_weapon[]
    usedByArmor          armor[]
    usedByCustomArmor    custom_armor[]
    usedByAddEquip       additional_equipment[]
    usedByCustomAddEquip custom_additional_equipment[]
    usedBySpeEquip       special_equipment[]
    usedByCustomSpeEquip custom_special_equipment[]

    frontRelated crystal[] @relation("FrontRelation")
    backRelated  crystal[] @relation("BackRelation")
}

// 活动武器与常态武器
enum AvailabilityType {
    permanent
    event
}

// 道具取得方式
enum AcquisitionMethodType {
    Drop
    Craft
}

// 武器
model weapon {
    name            String
    type            String
    baseAbi         Int
    stability       Int
    defaultCrystals crystal[]
    modifiers       String[]
    colorA          Int
    colorB          Int
    colorC          Int
    image           image[]
    recipe          recipe?

    usedBy custom_weapon[]

    belongToItem item   @relation(fields: [itemId], references: [id])
    itemId       String @id
}

// 玩家自定义武器
model custom_weapon {
    id String @id

    name                    String
    extraAbi                Int
    template                weapon                        @relation(fields: [templateId], references: [itemId])
    templateId              String
    refinement              Int
    enchantmentAttributes   weapon_enchantment_attributes @relation(fields: [enchantmentAttributesId], references: [id])
    enchantmentAttributesId String
    crystals                crystal[]

    master   player @relation(fields: [masterId], references: [id])
    masterId String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    extraDetails String

    usedByMainHand character[] @relation("weapon")
    usedBySubHand  character[] @relation("subWeapon")
}

// 身体装备
model armor {
    name            String
    baseDef         Int
    defaultCrystals crystal[]
    modifiers       String[]
    colorA          Int
    colorB          Int
    colorC          Int
    image           image[]
    recipe          recipe?

    usedBy custom_armor[]

    belongToItem item   @relation(fields: [itemId], references: [id])
    itemId       String @id
}

// 玩家自定义身体装备
model custom_armor {
    id String @id

    name                    String
    def                     Int
    armorType               ArmorType
    template                armor                        @relation(fields: [templateId], references: [itemId])
    templateId              String
    refinement              Int
    enchantmentAttributes   armor_enchantment_attributes @relation(fields: [enchantmentAttributesId], references: [id])
    enchantmentAttributesId String
    crystals                crystal[]

    master   player @relation(fields: [masterId], references: [id])
    masterId String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    extraDetails String

    usedBy character[]
}

// 追加装备
model additional_equipment {
    name            String
    baseDef         Int
    defaultCrystals crystal[]
    modifiers       String[]
    colorA          Int
    colorB          Int
    colorC          Int
    image           image[]
    recipe          recipe?

    usedBy custom_additional_equipment[]

    belongToItem item   @relation(fields: [itemId], references: [id])
    itemId       String @id
}

// 玩家自定义追加装备
model custom_additional_equipment {
    id String @id

    name       String
    def        Int
    template   additional_equipment @relation(fields: [templateId], references: [itemId])
    templateId String
    refinement Int
    crystals   crystal[]

    master   player @relation(fields: [masterId], references: [id])
    masterId String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    extraDetails String

    usedBy character[]
}

// 特殊装备
model special_equipment {
    name            String
    baseDef         Int
    defaultCrystals crystal[]
    modifiers       String[]
    recipe          recipe?

    usedBy custom_special_equipment[]

    belongToItem item   @relation(fields: [itemId], references: [id])
    itemId       String @id
}

// 玩家自定义特殊装备
model custom_special_equipment {
    id String @id

    name       String
    def        Int
    template   special_equipment @relation(fields: [templateId], references: [itemId])
    templateId String
    refinement Int
    crystals   crystal[]

    master   player @relation(fields: [masterId], references: [id])
    masterId String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    extraDetails String

    usedBy character[]
}

// 技能距离威力抵制类型
enum SkillDistanceResistType {
    None
    Long
    Short
    Both
}

// 技能
model skill {
    id String @id

    treeName       String
    posX           Int
    posY           Int
    tier           Int
    name           String
    isPassive      Boolean
    element        String
    chargingType   SkillChargingType
    distanceResist SkillDistanceResistType
    effect         skill_effect[]

    extraDetails String
    dataSources  String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique

    usedBy character_skill[]

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId])
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId])
    createdByAccountId String?
}

// 角色习得技能
model character_skill {
    id String @id

    lv         Int
    template   skill  @relation(fields: [templateId], references: [id])
    templateId String

    usedByCharacter character[]
}

// 技能效果
model skill_effect {
    id String @id

    mainHand          String
    subHand           String
    armor             String
    description       String
    motionFixed       String
    motionModified    String
    chantingFixed     String
    chantingModified  String
    ReservoirFixed    String
    ReservoirModified String
    startupFrames     String
    cost              String
    yield             skill_yield[]

    belongToSkill   skill  @relation(fields: [belongToskillId], references: [id], onDelete: Cascade)
    belongToskillId String
}

// 技能效果
model skill_yield {
    id String @id

    yieldType             YieldType
    yieldFormula          String
    mutationTimingFormula String?

    belongToSkillEffect skill_effect? @relation(fields: [skillEffectId], references: [id], onDelete: Cascade)
    skillEffectId       String?
}

// 宠物性格
enum Persona {
    Fervent
    Intelligent
    Mild
    Swift
    Justice
    Devoted
    Impulsive
    Calm
    Sly
    Timid
    Brave
    Active
    Sturdy
    Steady
    Max
}

// 宠物类型
enum PetType {
    AllTrades
    PhysicalAttack
    MagicAttack
    PhysicalDefense
    MagicDefensem
    Avoidance
    Hit
    SkillsEnhancement
    Genius
}

// 宠物
model pet {
    id String @id

    name  String
    maxLv Int

    extraDetails String
    dataSources  String

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique

    usedBy custom_pet[]

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId])
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId])
    createdByAccountId String?
}

// 自定义宠物
model custom_pet {
    id String @id

    template   pet     @relation(fields: [templateId], references: [id])
    templateId String
    pStr       Int
    pInt       Int
    pVit       Int
    pAgi       Int
    pDex       Int
    str        Int
    int        Int
    vit        Int
    agi        Int
    dex        Int
    weaponType String
    persona    Persona
    type       PetType
    weaponAtk  Int

    master   player @relation(fields: [masterId], references: [id])
    masterId String
}

// 消耗品
model consumable {
    name         String
    belongToItem item   @relation(fields: [itemId], references: [id])
    itemId       String @id

    type           String
    effectDuration Int
    effects        String[]
    recipe         recipe?

    usedBy character[]
}

// 连击
model combo {
    id String @id

    name  String
    combo Json

    usedBy character[]
}

// 时装
model avatar {
    id String @id

    name           String
    type           String
    modifiers      String[]
    belongToPlayer player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
    playerId       String

    usedBy character[]
}

// 机体
model character {
    id            String        @id
    name          String
    characterType CharacterType

    lv                Int
    baseStr           Int
    baseInt           Int
    baseVit           Int
    baseAgi           Int
    baseDex           Int
    specialAbiType    SpecialAbiType
    specialAbiValue   Int
    weapon            custom_weapon               @relation("weapon", fields: [weaponId], references: [id])
    weaponId          String
    subWeapon         custom_weapon               @relation("subWeapon", fields: [subWeaponId], references: [id])
    subWeaponId       String
    armor             custom_armor                @relation(fields: [armorId], references: [id])
    armorId           String
    addEquip          custom_additional_equipment @relation(fields: [addEquipId], references: [id])
    addEquipId        String
    speEquip          custom_special_equipment    @relation(fields: [speEquipId], references: [id])
    speEquipId        String
    fashion           avatar[]
    cuisine           String[]
    ExtraAttrs        String[]
    skillList         character_skill[]
    partnerSkillA     String
    partnerSkillAType MercenarySkillType
    partnerSkillB     String
    partnerSkillBType MercenarySkillType
    consumableList    consumable[]
    combos            combo[]
    master            player                      @relation(fields: [masterId], references: [id])
    masterId          String

    extraDetails String

    usedByMember member[]

    updatedAt       DateTime    @updatedAt
    createdAt       DateTime
    usedByMercenary mercenary[]

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique
    image        image      @relation(fields: [imageId], references: [id])
    imageId      String     @unique
}

// 佣兵类型
enum MercenaryType {
    Tank
    Dps
}

// 佣兵技能类型
enum MercenarySkillType {
    Active
    Passive
}

// 佣兵
model mercenary {
    type       MercenaryType
    template   character     @relation(fields: [templateId], references: [id])
    templateId String

    master   player @relation(fields: [masterId], references: [id])
    masterId String @id

    skillAId   String
    skillAType MercenarySkillType
    skillBId   String
    skillBType MercenarySkillType

    usedByMemberPartner   member[] @relation("partner")
    usedByMemberMercenary member[] @relation("mercenary")
}

// 队伍成员
model member {
    id String @id

    flow              Json
    character         character?        @relation(fields: [characterId], references: [id])
    characterId       String?
    partner           mercenary?        @relation("partner", fields: [partnerId], references: [masterId])
    partnerId         String?
    mercenary         mercenary?        @relation("mercenary", fields: [mercenaryId], references: [masterId])
    mercenaryId       String?
    mob               mob?              @relation(fields: [mobId], references: [id])
    mobId             String?
    mobDifficultyFlag MobDifficultyFlag // 仅当类型为Boss时生效

    belongToTeams team[]
}

// 队伍
model team {
    id String @id

    name    String?
    members member[]
    gems    String[]

    belongToSimulators simulator[]
}

// 其他用户可见性
enum Visibility {
    Public
    Private
}

// 模拟器
model simulator {
    id String @id

    name       String
    visibility Visibility
    teams      team[]

    extraDetails String?

    updatedAt DateTime @updatedAt
    createdAt DateTime

    statistics   statistics @relation(fields: [statisticsId], references: [id])
    statisticsId String     @unique

    updatedBy          account_update_data? @relation(fields: [updatedByAccountId], references: [accountId])
    updatedByAccountId String?
    createdBy          account_create_data? @relation(fields: [createdByAccountId], references: [accountId])
    createdByAccountId String?
}

// 统计字段
model statistics {
    id              String            @id
    usageTimestamps usage_timestamp[]
    viewTimestamps  view_timestamp[]
    rates           rate[]

    belongToWeaponEncAttr weapon_enchantment_attributes?
    belongToArmorEncAttr  armor_enchantment_attributes?
    belongToMob           mob?
    belongToItem          item?
    belongToSkill         skill?
    belongToPet           pet?
    character             character?
    simulator             simulator?
}

model image {
    id String @id

    dataUrl String

    belongToNpc npc?    @relation(fields: [npcId], references: [id])
    npcId       String? @unique

    belongToWeapon   weapon[]
    belongToArmor    armor[]
    belongToAddEquip additional_equipment[]
    usedByMob        mob[]
    usedByCharacter  character[]
}

// 评分
model rate {
    id                 String     @id
    rate               Int
    belongToUser       user       @relation(fields: [accountId], references: [id], onDelete: Cascade)
    accountId          String
    belongToStatistics statistics @relation(fields: [statisticsId], references: [id])
    statisticsId       String
}

// 使用记录时间戳
model usage_timestamp {
    timestamp        DateTime    @id
    usedByStatistics statistics? @relation(fields: [statisticsId], references: [id])
    statisticsId     String?
}

// 查看记录时间戳
model view_timestamp {
    timestamp        DateTime    @id
    usedByStatistics statistics? @relation(fields: [statisticsId], references: [id])
    statisticsId     String?
}
